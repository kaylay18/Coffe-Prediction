# -*- coding: utf-8 -*-
"""Friday Workshop 10.4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18iTzpudZ6aBxWo6FJClHEmJ7nTeWb5XN
"""

import pandas as pd
from google.colab import files

# Loading dataset
uploaded = files.upload()
file_name = "Coffee order dataset.xlsx"
df = pd.read_excel(file_name)

# Print first few rows of dataset
df.head()

df_encoded = pd.get_dummies(df, columns=['Label'])
df_encoded.head()

df_encoded = df_encoded.astype(int)
df_encoded.head()

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate the correlation matrix
correlation_matrix = df_encoded.corr()

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.tree import DecisionTreeRegressor

X = df_encoded.drop(['Label_Cappuccino', 'Label_Espresso', 'Label_Latte'], axis=1)
y = df_encoded[['Label_Cappuccino', 'Label_Espresso', 'Label_Latte']]

# Cross-validation setup
kfold = KFold(n_splits=5, shuffle=True, random_state=42)

for train_index, test_index in kfold.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    model = DecisionTreeRegressor()
    model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = model.predict(X_test)

    # Evaluate the model with mean squared error, mean absolute error, and R^2
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse:.2f}")

    mae = mean_absolute_error(y_test, y_pred)
    print(f"Mean Absolute Error: {mae:.2f}")

    r2 = r2_score(y_test, y_pred)
    print(f"R-squared: {r2:.2f}")

print(X_test.columns)

#!pip install streamlit scikit-learn pyngrok

#Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import pandas as pd
from sklearn.tree import DecisionTreeRegressor

# Load your trained model (replace with your actual model and code to load it)
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

# Define the input features for the bot
features = ['Token_0', 'Token_1', 'Token_2', 'Token_3', 'Token_4']

# Create the Streamlit app
st.title("Coffee Recommendation Bot")

# Get user input
user_input = {}
for feature in features:
    user_input[feature] = st.slider(feature, 0, 10, 5)

# Create a DataFrame from user input
input_df = pd.DataFrame([user_input])

# Make prediction using the loaded model
prediction = model.predict(input_df)

# Display the recommended coffee type
predicted_labels = ['Cappuccino', 'Espresso', 'Latte']
predicted_index = prediction[0].argmax()
st.write("Recommended coffee type:", predicted_labels[predicted_index])

# !streamlit run app.py